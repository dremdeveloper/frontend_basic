// 1. 상세한 개념
// 1.1 map 함수
// map 함수는 배열의 각 요소에 대해 주어진 함수를 호출하고, 그 결과를 모아 새 배열을 반환합니다.
// 즉, 배열의 각 요소를 변형할 때 사용합니다.

// 1.2 reduce 함수
// reduce 함수는 배열의 각 요소에 대해 주어진 리듀서 함수를 호출하고, 하나의 결과값을 반환합니다.
// 이는 배열의 모든 값을 하나의 값으로 줄이는데 사용됩니다.

// 2. 개념을 충분히 이해할수 있는 코드

// 2.1 map 함수 사용 예시
const numbers = [1, 2, 3, 4, 5];
const squares = numbers.map(num => num * num);
console.log(squares); // 출력: [1, 4, 9, 16, 25]

// 2.2 reduce 함수 사용 예시
const sum = numbers.reduce((accumulator, current) => accumulator + current, 0);
console.log(sum); // 출력: 15

// 3. 개발자들이 많이 실수하는 부분 

// 3.1 map 함수에서
// - 반환 값 누락: map 함수 내에서 값을 반환하지 않아 undefined가 요소로 포함되는 경우가 있습니다.
// - 부작용이 있는 함수 사용: map 함수는 순수 함수여야 하는데, 부작용이 있는 함수를 사용하면 예상치 못한 결과를 얻을 수 있습니다.

// 3.2 reduce 함수에서
// - 초기값 누락: reduce 함수를 사용할 때 초기값을 제공하지 않으면 첫 번째 요소가 초기값으로 사용되고, 첫 번째 호출에서는 두 번째 요소가 사용됩니다.
// - 리턴 값 누락: reduce 함수의 콜백에서 값을 반환하지 않으면 undefined가 누적자로 전달되어 오류가 발생할 수 있습니다.
